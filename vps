#!/bin/sh

echo "\033[44;1;37m Instalando VpsPack \033[0m "

apt-get update
apt-get upgrade -y

sleep 1.5s

#cp vpspack/* /bin
#cd /bin
#chmod +x backupusers banner Desinstalar Detalhes detalhesusers firewall-block limit Monitoring ResetFirewall restusers speedtest speedtest.py systemdetalhes UserBack Usercreate UserRedefine vpspack alterarlimite alterarsenha criarusuario expcleaner mudardata remover sshlimiter sshmonitor vpsmanager backup

apt-get install squid3 -y

IP=$(wget -qO- ipv4.icanhazip.com)

echo "# Ganhos de performançe na hierarchy_stoplist
hierarchy_stoplist cgi-bin ?
# Tempo limite de conexões aceitas e negadas
negative_ttl 3 minutes
positive_dns_ttl 5 minutes
# Terminar imediatamente conexões finalizadas de clientes
half_closed_clients off
# Desabilitar memory_pools (Ganho de performançe em RAM)
memory_pools off
# Fix
strip_query_terms off
detect_broken_pconn on
pipeline_prefetch on
acl url1 dstdomain -i 127.0.0.1
acl url2 dstdomain -i localhost
acl url3 dstdomain -i $IP
acl url3 dstdomain -i ssh-luan.tk
acl url3 dstdomain -i 52.67.244.100
acl url3 dstdomain -i luan-ssh.tk
acl url3 dstdomain -i luan-aruba.tk
acl url3 dstdomain -i 89.40.124.138
acl payload dstdomain -i "/etc/squid3/payload.txt"

http_access allow url1
http_access allow url2
http_access allow url3
http_access allow payload

http_access deny all
 
http_port 8080
http_port 80
http_port 3128

visible_hostname luan-ssh
forwarded_for off
via off" > /etc/squid3/squid.conf

echo ".claro.com.br
.claro.com
.claroideas.com
.claroideias.com.br
.claromusica.com
.clarosomdechamada.com.br
.clarovideo.com
.netclaro.com.br
.oi.com.br
.speedtest.net
.tim.com.br
.timanamaria.com.br
.vivo.com.br
.bradescocelular.com.br
v.whatsapp.com
loja.oi.com.br
.rdio.com/rewrite.pandora.com
.vivoblog.com.br
.vivomms.com.br
.cloudfront.net
.sascdn.com
.nethoes.com.br" > /etc/squid3/payload.txt

echo "Port 2510
Port 443
Protocol 2
Compression yes
KeyRegenerationInterval 3600
ServerKeyBits 1024
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 60
PermitRootLogin yes
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
PasswordAuthentication yes
X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#Banner /etc/banner.txt
#UseLogin no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
UsePAM yes" > /etc/ssh/sshd_config

service squid3 restart

chk=$(cat /etc/ssh/sshd_config |grep Banner )
if echo "$chk" |grep -v "#Banner" |grep Banner > /dev/null 2> /dev/null
then
local=$(echo "$chk" |grep -v "#Banner" |grep Banner |awk '{print $2}')
echo "O que vc deseja por no banner ?"
read -p ": " banner
echo "$banner" > $local
else
echo "Banner /etc/banner.txt" >> /etc/ssh/sshd_config
service ssh restart > /dev/null 2> /dev/null
service sshd restart > /dev/null 2> /dev/null
banner
fi

echo "fs.file-max = 51200

net.core.rmem_max = 67108864
net.core.wmem_max = 67108864
net.core.netdev_max_backlog = 250000
net.core.somaxconn = 4096

net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.ip_local_port_range = 10000 65000
net.ipv4.tcp_max_syn_backlog = 8192
net.ipv4.tcp_max_tw_buckets = 5000
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_mem = 25600 51200 102400
net.core.rmem_max = 67108864
net.core.wmem_max = 67108864
net.ipv4.tcp_rmem = 4096 87380 67108864
net.ipv4.tcp_wmem = 4096 65536 67108864
net.core.netdev_max_backlog = 250000
net.ipv4.tcp_mtu_probing=1
net.ipv4.tcp_congestion_control=westwood" >> /etc/sysctl.conf
sysctl -p
echo "westwood" > /proc/sys/net/ipv4/tcp_congestion_control

echo "\033[44;1;37m Instalado VpsPack \033[0m "

sleep 3s

echo "\033[44;1;37m Instalando NETHOGS \033[0m "

sleep 1.5s

	apt-get install vnstat -y
	apt-get install pktstat -y
	apt-get install make g++ -y
	apt-get install libncurses5-dev -y
	apt-get install libpcap-dev -y

	# Baixe o código fonte, compile e instale:
	wget http://github.com/raboof/nethogs/archive/v0.8.5.tar.gz
	tar xf v0.8.5.tar.gz
	cd ./nethogs-0.8.5/
	make && make install

echo "\033[44;1;37m Instalado NETHOGS \033[0m "

sleep 3s

echo "\033[44;1;37m Instalando BadVPNUDPGW \033[0m "

sleep 1.5s

	apt-get install screen wget gcc build-essential g++ make -y
	wget http://www.cmake.org/files/v2.8/cmake-2.8.12.tar.gz
	tar xvzf cmake*.tar.gz
	cd cmake*
	./bootstrap --prefix=/usr
	make 
	make install
	cd ..
	rm -r cmake*
	mkdir badvpn-build
	cd badvpn-build
	wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/badvpn/badvpn-1.999.128.tar.bz2
	tar xf badvpn-1.999.128.tar.bz2
	cd bad*
	cmake -DBUILD_NOTHING_BY_DEFAULT=1 -DBUILD_UDPGW=1
	make install
	cd ..
	rm -r bad*
	cd ..
	rm -r badvpn-build
	echo "#!/bin/bash
	badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 512 --max-connections-for-client 8" > /bin/badudp
	chmod +x /bin/badudp
	clear
	tput setaf 3 ; tput bold ; echo ""
	echo ""
	echo "BadVPN instalado com sucesso."
	echo "Para usar, crie uma sessão screen"
	echo "E execute o comando:"
	echo ""
	echo "badudp"
	echo ""
	echo "E deixe a sessão screen rodando em segundo plano."
	echo "" ; tput sgr0
	exit
else 
	echo ""
	exit
fi
fi
